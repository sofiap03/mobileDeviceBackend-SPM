// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  fullname  String
  email     String    @unique
  password  String
  avatar    String
  role      String    @default("user")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  breweries Brewery[]
  Review    Review[]
  Rating    Rating[]
  Event     Event[]
}

model Brewery {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  location    String
  description String
  beers       Beer[]
  userId      String   @db.ObjectId
  User        User?    @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Review      Review[]
  Rating      Rating[]
  Event       Event[]
}

model Beer {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  style       String
  abv         Float
  description String
  breweryId   String   @db.ObjectId
  Brewery     Brewery? @relation(fields: [breweryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Review      Review[]
  Rating      Rating[]
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  breweryId String   @db.ObjectId
  beerId    String?  @db.ObjectId
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  Brewery   Brewery? @relation(fields: [breweryId], references: [id])
  Beer      Beer?    @relation(fields: [beerId], references: [id])
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  breweryId String   @db.ObjectId
  beerId    String?  @db.ObjectId
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  Brewery   Brewery? @relation(fields: [breweryId], references: [id])
  Beer      Beer?    @relation(fields: [beerId], references: [id])
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  location    String
  breweryId   String   @db.ObjectId
  userId      String   @db.ObjectId
  User        User?    @relation(fields: [userId], references: [id])
  Brewery     Brewery? @relation(fields: [breweryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
